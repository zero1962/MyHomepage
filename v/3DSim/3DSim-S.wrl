#VRML V2.0 utf8
#----------------------------------------------------------------------------------------
#
# 3D Motion Simulator by VRML [ 3Dsim Ver 0.0 ]  2016.01.23 sat Kuniyuki.Tsujimoto
#
#----------------------------------------------------------------------------------------
#
#----+-----------+-----------------------------------------------------------------------
# Rev| date      |     改   訂  履  歴
#----+-----------+-----------------------------------------------------------------------
#    |           |
#----+-----------+-----------------------------------------------------------------------
# NC |2016.01.23 |First write by kuniyuki.tsujimoto
#----+-----------+-----------------------------------------------------------------------
# 1. Concept
#
#   PC/iOS/Web 上で簡易に３次元モデルの操縦模擬ができる。
#
#----------------------------------------------------------------------------------------
# 2. きっかけ
#     自由発想にもとづく。
#     VRMLエアクラフト博物館構築中に３次元モデルを操縦したい要求があった。
#----------------------------------------------------------------------------------------
# 3. 問題点
#  (1) Roll,Pitch,Yaw の関係が正しくない
#  (2) Viwepoint の切り替えがJavaScript Switch で切り替わらない。
#
#--------------------+---------------------------------+---------------------------+-----
# Type               |Label                            |Define / Return            |
#--------------------+---------------------------------+---------------------------+-----
#
#----------------------------------------------------------------------------------------
# Note;
#----------------------------------------------------------------------------------------

#--------------------+---------------------------------+---------------------------+-----
# ナビゲーション情報 |                                 |                           |
#--------------------+---------------------------------+---------------------------+-----
NavigationInfo {
	avatarSize       [ 0.2, 1.5, 0.75 ]  #ユーザーの太さ、目の高さ、足の長さ
#	headlight FALSE
#	headlight TRUE
	type ["EXAMINE","WALK","FLY","ANY","AVATAR"]
}

#--------------------+---------------------------------+---------------------------+-----
# 光の設定           |                                 |                           |
#--------------------+---------------------------------+---------------------------+-----
DirectionalLight {
	intensity 0.8
	ambientIntensity 0.200000
	color 1.000000 1.000000 1.000000
	direction -0.571429 -0.527605 -0.628571
}
#--------------------+---------------------------------+---------------------------+-----
# 背景               |                                 |                           |
#--------------------+---------------------------------+---------------------------+-----
Background {
	skyColor [
		0 0 0.6
		0.4 0.5 0.5
		0 0.2 0
	]
	skyAngle[ 1.4, 1.8, 3 ]
}
#--------------------+---------------------------------+---------------------------+-----
# 風景データ         |                                 |                           |
#--------------------+---------------------------------+---------------------------+-----
    DEF Base Transform
    {
      translation 0.0 0.0 0.0
      rotation  0.0 0.0 0.0 0.0
      scale 0.0001 0.0001 0.0001
      children
      [
	Inline
        {
	  url "../SF/mother.wrl"
	}
      ]
    }
#--------------------+---------------------------------+---------------------------+-----
# スイッチ           |モデル選択枝                     |                           |
#--------------------+---------------------------------+---------------------------+-----
DEF Sw Switch {
	whichChoice 0
	choice [
#--------------------+---------------------------------+---------------------------+-----
# 選択機体モデル     |                                 |                           |
#--------------------+---------------------------------+---------------------------+-----
# 0
    DEF model_0 Transform
    {
      scale       -0.0005 0.0005 -0.0005
      children
      [
	Inline
        {
	  url "../SF/yakumo.wrl"
	}
      ]
    }
#--------------------+------ モデル選択枝　終了
]}
#--------------------+---------------------------------+---------------------------+-----
# 固定機体モデル     |                                 |                           |
#--------------------+---------------------------------+---------------------------+-----
DEF model Transform {
	center      0.0, 0.0, 0.0
	scale       -0.0005 0.0005 -0.0005
	children [
Transform {
	translation 4000.0 0.0 0.0
	rotation    -0.2 1.0 0.0 3.14
	children [
		Inline {
			url "../SF/yakumo.wrl"
		}
      	]
}
]}
#--------------------+---------------------------------+---------------------------+-----
# 表示モデル         |操縦ボタン                       |                           |
#--------------------+---------------------------------+---------------------------+-----
DEF Console-Tf Transform {
	children [
		Transform {
			translation 0.0 -0.001 -0.005
			scale 0.8 0.8 0.8
			children [
				# JoyStick
				Transform {
					translation    -0.002  0.0  0.0
					# rotation       0      1    0     1.57
					scale           1      1    1
					children [
						# レバー
						DEF Head-Tf Transform {
							translation 0 0 0
								children [
								Shape {
									appearance DEF White-Ap Appearance {
										material Material {
											diffuseColor 0.5 0.5 0.5
										}
									}
									geometry Sphere {
										radius 0.0003
									}
								}
								DEF PlS PlaneSensor {
									minPosition -0.01 -1.3
									maxPosition  0.01  1.3
								}
								# スティック
								Transform {
									translation 0 0 0.0006
									rotation    1 0 0 1.5708
									children [
										Shape {
											appearance DEF Nose-Sp Appearance {
												material Material {
													diffuseColor 1 0.6 0.1
												}
											}
											geometry Cylinder {
												radius 0.0001
												height 0.0007
											}
										}
									]
								}
								Transform {
									translation 0 0 0.001
									rotation 1 0 0 1.5708
									children [
										Shape {
											appearance USE Nose-Sp
											geometry Sphere {
												radius 0.00014
											}
										}
									]
								}
							]
						}
						# ベース
						Transform {
							translation 0 0 0
							scale 1 1 0.1
							children [
								Shape {
									appearance USE White-Ap
									geometry Sphere {
										radius 0.0005
									}
								}
							]
						}
					]
				}
				# モデル切り替え
				Transform {
					rotation  1.0 0.0 0.0 1.54
					translation 0.001 0.0005 0.0
					children [
						DEF Model-ThS TouchSensor {}
						Shape {
							appearance Appearance {
								material Material {
									diffuseColor 0 0 1
								}
							}
							geometry Cylinder {
								radius 0.00015
								height 0.0001
							}
						}
					]
				}
				# カメラ切り替え
				Transform {
					rotation  1.0 0.0 0.0 1.54
					translation 0.001 0.0 0.0
					children [
						DEF Camera-ThS TouchSensor {}
						Shape {
							appearance Appearance {
								material Material {
									diffuseColor 0 0 0.5
								}
							}
							geometry Cylinder {
								radius 0.00015
								height 0.0001
							}
						}
					]
				}
				# 予備ボタン
				Transform {
					rotation  1.0 0.0 0.0 1.54
					translation 0.001 -0.0005 0.0
					children [
						DEF CW-ThS TouchSensor {}
						Shape {
							appearance Appearance {
								material Material {
									diffuseColor 0 0 0.2
								}
							}
							geometry Cylinder {
								radius 0.00015
								height 0.0001
							}
						}
					]
				}
				# 停止スイッチ
				Transform {
					translation -0.001 0.0  0.0
					children [
						DEF Stop-ThS TouchSensor {}
						Shape {
							appearance Appearance {
								material Material {
									diffuseColor 0.5 0.5 0
								}
							}
							geometry Box {
								size 0.0002 0.0002 0.0002
							}
						}
					]
				}
				# 前進スイッチ
				Transform {
					translation -0.001 -0.0005  0.0
					children [
						DEF F-ThS TouchSensor {}
						Shape {
							appearance Appearance {
								material Material {
								diffuseColor 1 1 0
								}
							}
							geometry Box {
								size 0.0002 0.0002 0.0002
							}
						}
					]
				}
				# 後退スイッチ
				Transform {
					translation -0.001 0.0005  0.0
					children [
						DEF B-ThS TouchSensor {}
						Shape {
							appearance Appearance {
								material Material {
									diffuseColor 0.2 0.2 0
								}
							}
							geometry Box {
								size 0.0002 0.0002 0.0002
							}
						}
					]
				}
				# Roll-CWスイッチ
				Transform {
					rotation  1.0 0.0 0.0 1.54
					translation 0.0005 0.0005 0
					children [
						DEF CW-ThS TouchSensor {}
						Shape {
							appearance Appearance {
								material Material {
									diffuseColor 1 0 1
								}
							}
							geometry Cylinder {
								radius 0.00015
								height 0.0001
							}
						}
					]
				}
				# Roll-CCWスイッチ
				Transform {
					rotation  1.0 0.0 0.0 1.54
					translation -0.0005 0.0005 0
					children [
						DEF CCW-ThS TouchSensor {}
						Shape {
							appearance Appearance {
								material Material {
									diffuseColor 1 0 1
								}
							}
							geometry Cylinder {
								radius 0.00015
								height 0.0001
							}
						}
					]
				}
				# Roll-Resetスイッチ
				Transform {
					rotation  1.0 0.0 0.0 1.54
					translation 0.0 0.0 0
					children [
						DEF RR-ThS TouchSensor {}
						Shape {
							appearance Appearance {
								material Material {
									diffuseColor 1 0 0
								}
							}
							geometry Cylinder {
								radius 0.00015
								height 0.0001
							}
						}
					]
				}
				# 上スイッチ
				Transform {
					translation 0 0.0005 0
					children [
						DEF U-ThS TouchSensor {}
						DEF Arrow-Sp Shape {
							appearance Appearance {
								material Material {
									diffuseColor 0 1 1
								}
							}
							geometry Cone {
								bottomRadius 0.0003
								height 0.0003
							}
						}
					]
				}
				# 下スイッチ
				Transform {
					translation 0 -0.0005 0
					children [
						DEF D-ThS TouchSensor {}
						Transform {
							rotation 0 0 1 3.141
							children USE Arrow-Sp
						}
					]
				}
				# 右ターンスイッチ
				Transform {
					translation 0.0005 0 0
					children [
						DEF R-ThS TouchSensor {}
						Transform {
							rotation 0 0 1 -1.571
							children USE Arrow-Sp
						}
					]
				}
				# 左ターンスイッチ
				Transform {
					translation -0.0005 0 0
					children [
						DEF L-ThS TouchSensor {}
						Transform {
							rotation 0 0 1 1.571
							children USE Arrow-Sp
						}
					]
				}
			]
		}
	]
}
#--------------------+---------------------------------+---------------------------+-----
# 表示モデル         |文字情報表示                     |                           |
#--------------------+---------------------------------+---------------------------+-----
DEF Console-Text Transform {
	children [
		Transform {
			translation 0.0015 -0.0008 -0.005
			scale 0.004 0.004 0.004
			children [
				Shape {
					appearance Appearance {
						material Material {
							diffuseColor  0 0 0
							emissiveColor 0 0 0
						}
					}
					geometry DEF Tx Text {
						fontStyle FontStyle {
							size 0.03
							justify "MIDDLE"
						}
					}
				}
			]
		}
	]
}
#--------------------+---------------------------------+---------------------------+-----
# 機体モデル         |カメラ位置切り替え               |                           |
#--------------------+---------------------------------+---------------------------+-----
DEF Sw2 Switch {
	whichChoice 0
	choice [
# -------------------------- カメラ選択枝　終了
#
]}
#--------------------+---------------------------------+---------------------------+-----
# スクリプト No.1    |ボタン操縦に従ってモデルを動かす |                           |
#--------------------+---------------------------------+---------------------------+-----
DEF Sc Script {
	eventIn SFBool isActive_Stop
	eventIn SFBool isActive_Forward
	eventIn SFBool isActive_Back
	eventIn SFBool isActive_Right
	eventIn SFBool isActive_Left
	eventIn SFBool isActive_Up
	eventIn SFBool isActive_Down
	eventIn SFBool isActive_Cw
	eventIn SFBool isActive_CCw
	eventIn SFBool isActive_Reset
	eventIn SFFloat set_fraction
	eventIn SFRotation rotation_Head
	
	eventOut SFVec3f    positionCar       # 車の位置
	eventOut SFRotation R_orientationCar  # 車の向き
	eventOut SFRotation P_orientationCar  # 車の向き
	eventOut SFRotation Y_orientationCar  # 車の向き
	
	field SFVec3f moveVec   0 0 -0.05     # 車の移動ベクトル
	field SFVec3f initDirection 0 0 1   # 車の向きの初期値（最初は向かって奥を向いている）
	field SFFloat moveSpeed 0           # 移動速度
	field SFFloat R_turnSpeed 0         # Roll 回転速度
	field SFFloat P_turnSpeed 0         # Pitch回転速度
	field SFFloat Y_turnSpeed 0         # Yaw  回転速度
	field SFFloat oldF 0                # 前回イベント時の fraction_changed の値
	field SFBool isCortona FALSE        # 実行しているブラウザーが Cortona か否か
	url "javascript:
// # -----------------------------------------
		function initialize () {
			
			positionCar = new SFVec3f (-0.9, 0.04, -0.001);
			
			// Orientation of the car is set to rotation centering on a Roll-axis.
			R_orientationCar = new SFRotation (0, 0, 1, 0);
			
			// Orientation of the car is set to rotation centering on a Pitch-axis.
			P_orientationCar = new SFRotation (1, 0, 0, 0);
			
			// Orientation of the car is set to rotation centering on a Yaw-axis.
			Y_orientationCar = new SFRotation (0, 1, 0, 1.57);
			
			// Is this browser Cortona ?
			isCortona = (Browser.getName() == 'Cortona VRML Client');
		}
		
		function isActive_Reset () {
			
			R_orientationCar.angle = 0.0;
			P_orientationCar.angle = 0.0;
			Y_orientationCar.angle = 1.57;
			positionCar.x = -0.9;
			positionCar.y = 0.04;
			positionCar.z = -0.001;
			moveSpeed =  0.0;
			moveVec.x =  0.0;
			moveVec.y =  0.0;
			moveVec.z =  0.0;
			rotation_Head.x= 0.0;
			rotation_Head.y= 0.0;
		}
		
		function isActive_Stop () {
			
			moveSpeed = 0;
		}
		
		function isActive_Forward () {
			
			moveSpeed = -0.050;
		}
		
		function isActive_Back () {
			
			moveSpeed = 0.050;
		}
		
		function isActive_Cw (active) {
			
			// If the Left button is pushed, turnSpeed will be set to 1, and turnSpeed will be set to 0 if it is detached.
			R_turnSpeed = -active;
		}
		
		function isActive_CCw (active) {
			
			// If the Left button is pushed, turnSpeed will be set to 1, and turnSpeed will be set to 0 if it is detached.
			R_turnSpeed = active;
		}
		
		function isActive_Up (active) {
			
			// If the Left button is pushed, turnSpeed will be set to 1, and turnSpeed will be set to 0 if it is detached.
			P_turnSpeed = active;
		}
		
		function isActive_Down (active) {
			
			// If the Left button is pushed, turnSpeed will be set to 1, and turnSpeed will be set to 0 if it is detached.
			P_turnSpeed = -active;
		}
		
		function isActive_Right (active) {
			
			// If the Right button is pushed, turnSpeed will be set to -1, and turnSpeed will be set to 0 if it is detached.
			Y_turnSpeed = -active;
		}
		
		function isActive_Left (active) {
			
			// If the Left button is pushed, turnSpeed will be set to 1, and turnSpeed will be set to 0 if it is detached.
			Y_turnSpeed = active;
		}
		
		function set_fraction (f) {
			
			// Gets the quantity from which fraction changed.
			var df = f - oldF;
			if ( df < 0 ) df++;
			oldF = f;
			
			// If this browser is Cortona, the reciprocal of Frame Rate will be put into df.
			if (isCortona) {
				var fps = Browser.getCurrentFrameRate();
				if ( fps > 0.0 ) df = 1 / fps;
			}
			
			if ( R_turnSpeed != 0 ) {
				
				// Orientation of the car is changed.
				R_orientationCar.angle += R_turnSpeed * df;
				
				// The move vector is set according to the orientation of the car.
				moveVec = R_orientationCar.multVec( initDirection );
			}
			
			else if ( P_turnSpeed != 0 ) {
				
				// Orientation of the car is changed.
				P_orientationCar.angle += P_turnSpeed * df;
				
				// The move vector is set according to the orientation of the car.
				moveVec = P_orientationCar.multVec( initDirection );
			}
			
			else if ( Y_turnSpeed != 0 ) {
				
				// Orientation of the car is changed.
				Y_orientationCar.angle += Y_turnSpeed * df;
				
				// The move vector is set according to the orientation of the car.
				moveVec = Y_orientationCar.multVec( initDirection );
			}
			
			else if (( P_turnSpeed == 0)&&( Y_turnSpeed == 0)) {
			//	P_orientationCar.angle = rotation_Head.x;
			//	Y_orientationCar.angle = rotation_Head.y;
			}
			else {
				;
			}
			
			if ( moveSpeed != 0 ) {
				
				// Sets the new position of the car.
				positionCar = moveVec.multiply( moveSpeed * df ).add( positionCar );
			}
		}
	"
}
#--------------------+---------------------------------+---------------------------+-----
# スクリプト No.2    |文字情報表示                     |                           |
#--------------------+---------------------------------+---------------------------+-----
DEF Sc2 Script {
	eventIn SFFloat passage
	eventIn SFVec3f positionCar
	eventIn SFRotation rotation_Head
	field SFNode Sw  USE Sw
	field SFNode Sw2 USE Sw2
	eventOut MFString browserInfo
	url "javascript:
		function passage () {
			browserInfo[0] = 'Pos_x:'+ positionCar.x;
			browserInfo[1] = 'Pos_y:'+ positionCar.y;
			browserInfo[2] = 'Pos_z:'+ positionCar.z;
			browserInfo[3] = 'Joy_x:'+ rotation_Head.x;
			browserInfo[4] = 'Joy_y:'+ rotation_Head.y;
			browserInfo[5] = 'Camera No.'+ Sw2.whichChoice;
			browserInfo[6] = 'Model  No.'+ Sw.whichChoice;
		}
	"
}
#--------------------+---------------------------------+---------------------------+-----
# スクリプト No.3    |ボタン操縦に従ってモデル切替     |                           |
#--------------------+---------------------------------+---------------------------+-----
DEF Sc3 Script {
	eventIn SFTime changeShape
	field SFNode Sw  USE Sw
	directOutput TRUE
	url "javascript:
		function changeShape () {
			Sw.whichChoice++;
			Sw.whichChoice %= Sw.choice.length;
		}
	"
}
#--------------------+---------------------------------+---------------------------+-----
# スクリプト No.4    |ボタン操縦に従ってカメラ切替     |                           |
#--------------------+---------------------------------+---------------------------+-----
DEF Sc4 Script {
	eventIn SFTime changeShape
	field SFNode Sw2  USE Sw2
	directOutput TRUE
	url "javascript:
		function changeShape () {
			Sw2.whichChoice++;
			Sw2.whichChoice %= Sw2.choice.length;
		}
	"
}
#--------------------+---------------------------------+---------------------------+-----
# スクリプト No.5    |仮想ジョイステクック             |                           |
#--------------------+---------------------------------+---------------------------+-----
DEF Sc5 Script {
	eventIn  SFVec3f    translation_Head
	eventOut SFRotation rotation_Head
	field    SFBool     isCortona FALSE
	url "javascript:
		function initialize () {
			isCortona = (Browser.getName() == 'Cortona VRML Client');
		}
		function translation_Head (val) {
			var ry = new SFRotation (0, 1, 0,  val.x * 400);
			var rx = new SFRotation (1, 0, 0, -val.y * 400);
			rotation_Head = isCortona ?  ry.multiply(rx) : rx.multiply(ry);
		}
	"
}
#--------------------+---------------------------------+---------------------------+-----
# アニメーション     |操作ボタン入力　　　　           |                           |
#--------------------+---------------------------------+---------------------------+-----
ROUTE Stop-ThS.isActive TO Sc.isActive_Stop
ROUTE F-ThS.isActive TO Sc.isActive_Forward
ROUTE B-ThS.isActive TO Sc.isActive_Back
ROUTE R-ThS.isActive TO Sc.isActive_Right
ROUTE L-ThS.isActive TO Sc.isActive_Left
ROUTE U-ThS.isActive TO Sc.isActive_Up
ROUTE D-ThS.isActive TO Sc.isActive_Down
ROUTE  CW-ThS.isActive TO Sc.isActive_Cw
ROUTE CCW-ThS.isActive TO Sc.isActive_CCw
ROUTE  RR-ThS.isActive TO Sc.isActive_Reset
ROUTE Sc5.rotation_Head  TO Sc.rotation_Head

# タイムセンサーの fraction_changed をスクリプトに送る。
DEF TiS TimeSensor { loop TRUE }
ROUTE TiS.fraction_changed TO Sc.set_fraction

# モデルの位置と向きをセットする。
ROUTE Sc.positionCar 		TO model_0.translation
ROUTE Sc.R_orientationCar 	TO model_0.rotation
ROUTE Sc.P_orientationCar 	TO model_0.rotation
ROUTE Sc.Y_orientationCar 	TO model_0.rotation

#--------------------+---------------------------------+---------------------------+-----
# アニメーション     |モデル／カメラ切り替え           |                           |
#--------------------+---------------------------------+---------------------------+-----
ROUTE TiS.fraction_changed TO Sc2.passage
ROUTE Sc.positionCar  TO Sc2.positionCar
ROUTE Sc2.browserInfo TO Tx.string
ROUTE Model-ThS.touchTime  TO Sc3.changeShape
ROUTE Camera-ThS.touchTime TO Sc4.changeShape
ROUTE Sc5.rotation_Head  TO Sc2.rotation_Head
#--------------------+---------------------------------+---------------------------+-----
# アニメーション     |仮想ジョイスティック             |                           |
#--------------------+---------------------------------+---------------------------+-----
ROUTE PlS.translation_changed TO Sc5.translation_Head
ROUTE Sc5.rotation_Head TO Head-Tf.rotation
#--------------------+---------------------------------+---------------------------+-----
# アニメーション     |ボタン操縦                       |                           |
#--------------------+---------------------------------+---------------------------+-----
DEF Console-PrS ProximitySensor { size 1000 1000 1000 }
ROUTE Console-PrS.position_changed TO Console-Tf.set_translation
ROUTE Console-PrS.orientation_changed TO Console-Tf.set_rotation
DEF PrS ProximitySensor { size 1000 1000 1000 }
ROUTE PrS.position_changed TO Console-Text.set_translation
ROUTE PrS.orientation_changed TO Console-Text.set_rotation
#--------------------+---------------------------------+---------------------------+-----
# アニメーション     |model                            |                           |
#--------------------+---------------------------------+---------------------------+-----
DEF Timer3 TimeSensor
{
	cycleInterval 25.0
	loop TRUE
}
DEF Rot3 OrientationInterpolator
{
	key [0.0, 0.25, 0.5, 0.75, 1.0]
	keyValue
	[ 
       		0 1 0 0.0,
       		0 1 0 1.57,
       		0 1 0 3.14,
       		0 1 0 4.71,
       		0 1 0 6.28
	]
}
ROUTE Timer3.fraction_changed TO Rot3.set_fraction
ROUTE Rot3.value_changed TO model.set_rotation
#--------------------+---------------------------------+---------------------------+-----
# Note;              | Copy right kuniyuki.tsujimoto   |
#--------------------+---------------------------------+---------------------------+-----
